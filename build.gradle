plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.7-SNAPSHOT'
}

repositories {
    mavenLocal()
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "Parchment"
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven { url "https://maven.architectury.dev/" }

    maven {
        //maven for all github project releases
        url "https://jitpack.io"
    }

    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven {
        name = "DevOS One"
        url = "https://mvn.devos.one/releases/"
    }

    maven {
        name = "Cafeteria Dev"
        url = "https://maven.cafeteria.dev/releases/"
    }

    maven {
        name = "JamiesWhiteShirt Dev"
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
}

def build_snapshot = System.getenv("BUILD_SNAPSHOT") == "true"
def build_id = System.getenv("BUILD_ID")

version = '2.1.13-1.20.1-fabric'

if (build_snapshot) {
    version += '-SNAPSHOT'
}
if (build_id != null) {
    // get last two parts of build id
    def split = build_id.split('-')
    if (split.length >= 2) {
        def build_id_last = split[split.length - 1]
        def build_id_second = split[split.length - 2]
        build_id = build_id_second + "-" + build_id_last
    }

    version += "+build.${build_id}"
}

group = 'com.github.alexthe667' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'iceandfire'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

fabricApi {
    configureDataGeneration()
}

loom {
    accessWidenerPath = file("src/main/resources/iceandfire.accesswidener")
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.mc_version
    inputs.property "loader_version", project.loader_version
    inputs.property "architectury_version", project.architectury_version
    inputs.property "forge_config_version", project.forge_config_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.mc_version,
                "loader_version": project.loader_version,
                "architectury_version": project.architectury_version,
                "forge_config_version": project.forge_config_version
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${mc_version}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    // at runtime, use the full JEI jar
    modImplementation("mezz.jei:jei-${mc_version}-fabric:${jei_version}")
    //compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.25")
    //compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.25")
    //runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge-15.2.0.25")
    // TODO: Properly implement citadels pathfinding related code
    modImplementation "com.tfar.citadel:Citadel-Fabric:2.4.1-1.20.1"
    // TODO: Reimplement for 1.20.2 and onwards
    //implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    //implementation(jarJar("io.github.llamalad7:mixinextras-neoforge:0.3.2")) {
    //    jarJar.ranged(it, "[0.3.2,)")
    //}

    modImplementation "dev.architectury:architectury-fabric:${architectury_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_version}"

    def portingLibs = ["accessors", "asm", "attributes", "base", "blocks", "brewing", "chunk_loading", "client_events", "common", "core", "data", "entity", "extensions", "fluids", "gametest", "gui_utils", "items", "lazy_registration", "level_events", "loot", "mixin_extensions", "model_builders", "model_generators", "model_loader", "model_materials", "models", "networking", "obj_loader", "recipe_book_categories", "registries", "tags", "tool_actions", "transfer", "utility"]
    for (final def lib in portingLibs) {
        modImplementation(include("io.github.fabricators_of_create.Porting-Lib:$lib:${property("porting_lib_version")}"))
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes([
                "Specification-Title": "iceandfire",
                "Specification-Vendor": "alexthe667",
                "Specification-Version": mod_version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"alexthe667",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "iceandfire.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
